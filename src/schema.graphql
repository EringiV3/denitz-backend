type Query {
  getCurrentUser: User
  getProfile(accountId: String!): Profile!
  getDenim(id: String!): Denim!
  getDenimReport(id: String!): DenimReport!
}

type Mutation {
  createUserAccount: User!
  updateUser(id: String!, input: UserInput!): User!
  createS3SignedUrl(input: S3SignedUrlInput!): S3SignedUrlResponse!
  updateProfile(id: String!, input: ProfileInput!): Profile!
  createDenim(input: DenimInput!): Denim!
  updateDenim(id: String!, input: DenimInput!): Denim!
  deleteDenim(id: String!): Denim!
  createDenimReport(input: DenimReportInput!): DenimReport!
  updateDenimReport(id: String!, input: DenimReportInput!): DenimReport!
  deleteDenimReport(id: String!): DenimReport!
}

input S3SignedUrlInput {
  contentType: String!
}

input DenimReportInput {
  denimId: String!
  title: String
  description: String
  frontImageUrl: String
  backImageUrl: String
  detailImageUrl: [String!]!
}

input DenimInput {
  name: String
  description: String
  imageUrl: String
}

input ProfileInput {
  name: String
  iconImageUrl: String
  description: String
  twitterUrl: String
  instagramUrl: String
  websiteUrl: String
}

input UserInput {
  accountId: String!
}

type User {
  id: String!
  accountId: String!
  profile: Profile
  denim: [Denim]
  createdAt: Date
  updatedAt: Date
}

type Profile {
  id: String!
  name: String
  iconImageUrl: String
  description: String
  twitterUrl: String
  instagramUrl: String
  websiteUrl: String
  user: User
  createdAt: Date
  updatedAt: Date
}

type Denim {
  id: String!
  name: String
  description: String
  imageUrl: String
  user: User
  denimReports: [DenimReport]
  createdAt: Date
  updatedAt: Date
}

type DenimReport {
  id: String!
  title: String
  description: String
  frontImageUrl: String
  backImageUrl: String
  detailImageUrl: [String]
  denim: Denim
  createdAt: Date
  updatedAt: Date
}

type S3SignedUrlResponse {
  fileName: String!
  signedUrl: String!
}

scalar Date
