type Query {
  getUser: User!
  getProfile(accountId: String!): Profile!
  getDenim(id: String!): Denim!
  getDenimReport(id: String!): DenimReport!
}

type Mutation {
  createUser(input: UserInput!): User!
  updateUser(id: String!, input: UserInput!): User!
  createS3SignedUrl: String!
  updateProfile(id: String!, input: ProfileInput!): Profile!
  createDenim(input: DenimInput!): Denim!
  updateDenim(id: String!, input: DenimInput!): Denim!
  deleteDenim(id: String!): Denim!
  createDenimReport(input: DenimReportInput): DenimReport!
  updateDenimReport(id: String!, inpu: DenimReportInput): DenimReport!
  deleteDenimReport(id: String!): DenimReport!
}

type DenimReportInput {
  title: String
  description: String
  frontImageUrl: String
  backImageUrl: String
  detailImageUrl: [String]
}

type DenimInput {
  name: String
  description: String
  imageUrl: String
}

type ProfileInput {
  name: String
  iconImageUrl: String
  description: String
  twitterUrl: String
  instagramUrl: String
  websiteUrl: String
}

input UserInput {
  accountId: String!
}

type User {
  id: String!
  accountId: String!
  profile: Profile!
  denim: [Denim!]!
  createdAt: String!
  updatedAt: String
}

type Profile {
  id: String!
  name: String
  iconImageUrl: String
  description: String
  twitterUrl: String
  instagramUrl: String
  websiteUrl: String
  user: User!
  createdAt: String!
  updatedAt: String
}

type Denim {
  id: String!
  name: String
  description: String
  imageUrl: String
  user: User!
  denimReports: [DenimReport!]!
  createdAt: String!
  updatedAt: String
}

type DenimReport {
  id: String!
  title: String!
  description: String
  frontImageUrl: String
  backImageUrl: String
  detailImageUrl: [String]!
  denim: Denim!
  createdAt: String!
  updatedAt: String
}

scalar Date
